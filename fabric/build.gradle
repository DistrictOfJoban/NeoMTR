import org.apache.tools.ant.filters.ReplaceTokens

architectury {
	platformSetupLoomIde()
	fabric()
}

loom {
	accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
	common
	shadowCommon
	clothConfigJar
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentFabric.extendsFrom common
}

repositories {
	maven { url 'https://repo.sleeping.town/' }
}

dependencies {
	modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
	modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
	modApi "com.terraformersmc:modmenu:${rootProject.mod_menu_version}"

	common(project(path: ":common", configuration: "namedElements")) { transitive false }
	shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

	modApi("me.shedaniel.cloth:cloth-config-fabric:${rootProject.cloth_config_version}") { transitive false }
	modApi("me.shedaniel.cloth:basic-math:0.6.1") { transitive false }
	clothConfigJar("me.shedaniel.cloth:cloth-config-fabric:${rootProject.cloth_config_version}") { transitive false }
	clothConfigJar("me.shedaniel.cloth:basic-math:0.6.1") { transitive false }

	modImplementation 'folk.sisby:surveyor:1.0.0-alpha.6+1.21'
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

static boolean matchInnerClass(String path, String... names) {
	names.any { name -> path.startsWith(name) }
}

shadowJar {
	configurations = [project.configurations.shadowCommon]
	archiveClassifier = "dev-shadow"
	relocate "javax.servlet", "mtr.libraries.javax.servlet"
	relocate "org.eclipse", "mtr.libraries.org.eclipse"

	relocate 'de.javagl', 'vendor.cn.zbx1425.sowcerext.de.javagl'
	// relocate 'org.mozilla', 'vendor.cn.zbx1425.mtrsteamloco.org.mozilla'

	from project.configurations.clothConfigJar.files.collect {
		return zipTree(it).matching { filter ->
			filter.include { e ->
				matchInnerClass e.path as String,
						"me/shedaniel/clothconfig2",
						"me/shedaniel/math",
						"assets/cloth-config2"
			}
		}
	}

	relocate "me.shedaniel", "cn.zbx1425.mtrsteamloco.vendor.me.shedaniel"
}

remapJar {
	input.set shadowJar.archiveFile
	dependsOn shadowJar
	archiveClassifier = null
}

components.java {
	withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
		skip()
	}
}

tasks.register("moveFabricBuilds") {
	doLast {
		delete fileTree("../build/release").matching {
			include "**/${rootProject.variation_header}-fabric*"
		}
		delete fileTree("../build/libs").matching {
			include "**/${rootProject.variation_header}-fabric*"
		}
		delete fileTree("../build/latest").matching {
			include "**/${rootProject.variation_header}-fabric*"
		}
		copy {
			from "build/libs"
			include "*${rootProject.minecraft_version}.jar"
			into "../build/release"
			rename "(.+)", "${rootProject.variation_header}-\$1"
		}
		if (rootProject.variation == "normal") {
			copy {
				from "build/libs"
				into "../build/latest"
				rename { fileName -> "NeoMTR-${fileName.replace(rootProject.mod_version, "latest")}" }
			}
			copy {
				from "build/libs"
				include "*${rootProject.minecraft_version}-dev-shadow.jar"
				into "../build/libs"
				rename "(.+)", "NeoMTR-\$1"
			}
		}
	}
}

afterEvaluate {
	for (def task in it.tasks) {
		if (task == tasks.build) {
			task.finalizedBy tasks.moveFabricBuilds
		}
	}
}
