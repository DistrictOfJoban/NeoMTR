package mtr.registry;

import mtr.Keys;
import mtr.MTR;
import mtr.RegistryClient;
import mtr.block.*;
import mtr.data.PIDSType;
import mtr.data.TransportMode;
import mtr.mappings.BlockEntityMapper;
import mtr.render.*;
import net.minecraft.client.renderer.RenderType;
import net.minecraft.sounds.SoundEvent;
import net.minecraft.world.entity.Entity;
import net.minecraft.world.entity.EntityType;
import net.minecraft.world.item.Item;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.block.SlabBlock;
import net.minecraft.world.level.block.entity.BlockEntityType;
import net.minecraft.world.level.block.state.BlockBehaviour;

import java.util.function.BiConsumer;


public class Blocks {
	public static final RegistryObject<Block> APG_DOOR = new RegistryObject<>(BlockAPGDoor::new);
	public static final RegistryObject<Block> APG_GLASS = new RegistryObject<>(BlockAPGGlass::new);
	public static final RegistryObject<Block> APG_GLASS_END = new RegistryObject<>(BlockAPGGlassEnd::new);
	public static final RegistryObject<Block> ARRIVAL_PROJECTOR_1_SMALL = new RegistryObject<>(BlockArrivalProjector1Small::new);
	public static final RegistryObject<Block> ARRIVAL_PROJECTOR_1_MEDIUM = new RegistryObject<>(BlockArrivalProjector1Medium::new);
	public static final RegistryObject<Block> ARRIVAL_PROJECTOR_1_LARGE = new RegistryObject<>(BlockArrivalProjector1Large::new);
	public static final RegistryObject<Block> CEILING = new RegistryObject<>(() -> new BlockCeilingAuto(BlockBehaviour.Properties.of().requiresCorrectToolForDrops().strength(2).lightLevel(state -> 15)));
	public static final RegistryObject<Block> CEILING_LIGHT = new RegistryObject<>(() -> new BlockCeiling(BlockBehaviour.Properties.of().requiresCorrectToolForDrops().strength(2).lightLevel(state -> 15)));
	public static final RegistryObject<Block> CEILING_NO_LIGHT = new RegistryObject<>(() -> new BlockCeiling(BlockBehaviour.Properties.of().requiresCorrectToolForDrops().strength(2)));
	public static final RegistryObject<Block> CLOCK = new RegistryObject<>(() -> new BlockClock(BlockBehaviour.Properties.of().requiresCorrectToolForDrops().strength(2).lightLevel(state -> 5)));
	public static final RegistryObject<Block> CLOCK_POLE = new RegistryObject<>(() -> new BlockClockPole(BlockBehaviour.Properties.of().requiresCorrectToolForDrops().strength(1)));
	public static final RegistryObject<Block> ESCALATOR_SIDE = new RegistryObject<>(BlockEscalatorSide::new);
	public static final RegistryObject<Block> ESCALATOR_STEP = new RegistryObject<>(BlockEscalatorStep::new);
	public static final RegistryObject<Block> GLASS_FENCE_CIO = new RegistryObject<>(BlockGlassFence::new);
	public static final RegistryObject<Block> GLASS_FENCE_CKT = new RegistryObject<>(BlockGlassFence::new);
	public static final RegistryObject<Block> GLASS_FENCE_HEO = new RegistryObject<>(BlockGlassFence::new);
	public static final RegistryObject<Block> GLASS_FENCE_MOS = new RegistryObject<>(BlockGlassFence::new);
	public static final RegistryObject<Block> GLASS_FENCE_PLAIN = new RegistryObject<>(BlockGlassFence::new);
	public static final RegistryObject<Block> GLASS_FENCE_SHM = new RegistryObject<>(BlockGlassFence::new);
	public static final RegistryObject<Block> GLASS_FENCE_STAINED = new RegistryObject<>(BlockGlassFence::new);
	public static final RegistryObject<Block> GLASS_FENCE_STW = new RegistryObject<>(BlockGlassFence::new);
	public static final RegistryObject<Block> GLASS_FENCE_TSH = new RegistryObject<>(BlockGlassFence::new);
	public static final RegistryObject<Block> GLASS_FENCE_WKS = new RegistryObject<>(BlockGlassFence::new);
	public static final RegistryObject<Block> LOGO = new RegistryObject<>(() -> new Block(BlockBehaviour.Properties.of().requiresCorrectToolForDrops().strength(2).lightLevel(state -> 10)));
	public static final RegistryObject<Block> LIFT_BUTTONS_1 = new RegistryObject<>(BlockLiftButtons::new);
	public static final RegistryObject<Block> LIFT_PANEL_EVEN_1 = new RegistryObject<>(BlockLiftPanelEven1::new);
	public static final RegistryObject<Block> LIFT_PANEL_ODD_1 = new RegistryObject<>(BlockLiftPanelOdd1::new);
	public static final RegistryObject<Block> LIFT_PANEL_EVEN_2 = new RegistryObject<>(BlockLiftPanelEven2::new);
	public static final RegistryObject<Block> LIFT_PANEL_ODD_2 = new RegistryObject<>(BlockLiftPanelOdd2::new);
	public static final RegistryObject<Block> LIFT_TRACK_1 = new RegistryObject<>(BlockLiftTrack::new);
	public static final RegistryObject<Block> LIFT_TRACK_FLOOR_1 = new RegistryObject<>(BlockLiftTrackFloor::new);
	public static final RegistryObject<Block> LIFT_DOOR_EVEN_1 = new RegistryObject<>(BlockLiftDoor::new);
	public static final RegistryObject<Block> LIFT_DOOR_ODD_1 = new RegistryObject<>(BlockLiftDoorOdd::new);
	public static final RegistryObject<Block> MARBLE_BLUE = new RegistryObject<>(() -> new Block(BlockBehaviour.Properties.of().requiresCorrectToolForDrops().strength(1)));
	public static final RegistryObject<Block> MARBLE_BLUE_SLAB = new RegistryObject<>(() -> new SlabBlock(BlockBehaviour.Properties.of().requiresCorrectToolForDrops().strength(1)));
	public static final RegistryObject<Block> MARBLE_SANDY = new RegistryObject<>(() -> new Block(BlockBehaviour.Properties.of().requiresCorrectToolForDrops().strength(1)));
	public static final RegistryObject<Block> MARBLE_SANDY_SLAB = new RegistryObject<>(() -> new SlabBlock(BlockBehaviour.Properties.of().requiresCorrectToolForDrops().strength(1)));
	public static final RegistryObject<Block> METAL = new RegistryObject<>(() -> new Block(BlockBehaviour.Properties.of().requiresCorrectToolForDrops().strength(2)));
	public static final RegistryObject<Block> METAL_SLAB = new RegistryObject<>(() -> new SlabBlock(BlockBehaviour.Properties.of().requiresCorrectToolForDrops().strength(2)));
	public static final RegistryObject<Block> MOSAIC_TILE = new RegistryObject<>(() -> new Block(BlockBehaviour.Properties.of().requiresCorrectToolForDrops().strength(2)));
	public static final RegistryObject<Block> MOSAIC_TILE_SLAB = new RegistryObject<>(() -> new SlabBlock(BlockBehaviour.Properties.of().requiresCorrectToolForDrops().strength(2)));
	public static final RegistryObject<Block> PIDS_1 = new RegistryObject<>(BlockPIDS1::new);
	public static final RegistryObject<Block> PIDS_2 = new RegistryObject<>(BlockPIDS2::new);
	public static final RegistryObject<Block> PIDS_3 = new RegistryObject<>(BlockPIDS3::new);
	public static final RegistryObject<Block> PIDS_4 = new RegistryObject<>(BlockPIDS4::new);
	public static final RegistryObject<Block> PIDS_SINGLE_ARRIVAL_1 = new RegistryObject<>(BlockPIDSSingleArrival1::new);
	public static final RegistryObject<Block> PIDS_POLE = new RegistryObject<>(() -> new BlockPIDSPole(BlockBehaviour.Properties.of().requiresCorrectToolForDrops().strength(1)));
	public static final RegistryObject<Block> PLATFORM = new RegistryObject<>(() -> new BlockPlatform(BlockBehaviour.Properties.of().requiresCorrectToolForDrops().strength(2), false));
	public static final RegistryObject<Block> PLATFORM_INDENTED = new RegistryObject<>(() -> new BlockPlatform(BlockBehaviour.Properties.of().requiresCorrectToolForDrops().strength(2).noOcclusion(), true));
	public static final RegistryObject<Block> PLATFORM_NA_1 = new RegistryObject<>(() -> new BlockPlatform(BlockBehaviour.Properties.of().requiresCorrectToolForDrops().strength(2), false));
	public static final RegistryObject<Block> PLATFORM_NA_1_INDENTED = new RegistryObject<>(() -> new BlockPlatform(BlockBehaviour.Properties.of().requiresCorrectToolForDrops().strength(2).noOcclusion(), true));
	public static final RegistryObject<Block> PLATFORM_NA_2 = new RegistryObject<>(() -> new BlockPlatform(BlockBehaviour.Properties.of().requiresCorrectToolForDrops().strength(2), false));
	public static final RegistryObject<Block> PLATFORM_NA_2_INDENTED = new RegistryObject<>(() -> new BlockPlatform(BlockBehaviour.Properties.of().requiresCorrectToolForDrops().strength(2).noOcclusion(), true));
	public static final RegistryObject<Block> PLATFORM_UK_1 = new RegistryObject<>(() -> new BlockPlatform(BlockBehaviour.Properties.of().requiresCorrectToolForDrops().strength(2), false));
	public static final RegistryObject<Block> PLATFORM_UK_1_INDENTED = new RegistryObject<>(() -> new BlockPlatform(BlockBehaviour.Properties.of().requiresCorrectToolForDrops().strength(2).noOcclusion(), true));
	public static final RegistryObject<Block> PSD_DOOR_1 = new RegistryObject<>(() -> new BlockPSDDoor(0));
	public static final RegistryObject<Block> PSD_GLASS_1 = new RegistryObject<>(() -> new BlockPSDGlass(0));
	public static final RegistryObject<Block> PSD_GLASS_END_1 = new RegistryObject<>(() -> new BlockPSDGlassEnd(0));
	public static final RegistryObject<Block> PSD_DOOR_2 = new RegistryObject<>(() -> new BlockPSDDoor(1));
	public static final RegistryObject<Block> PSD_GLASS_2 = new RegistryObject<>(() -> new BlockPSDGlass(1));
	public static final RegistryObject<Block> PSD_GLASS_END_2 = new RegistryObject<>(() -> new BlockPSDGlassEnd(1));
	public static final RegistryObject<Block> PSD_TOP = new RegistryObject<>(BlockPSDTop::new);
	public static final RegistryObject<Block> RAIL_NODE = new RegistryObject<>(() -> new BlockNode(TransportMode.TRAIN));
	public static final RegistryObject<Block> BOAT_NODE = new RegistryObject<>(BlockNode.BlockBoatNode::new);
	public static final RegistryObject<Block> CABLE_CAR_NODE_LOWER = new RegistryObject<>(() -> new BlockNode.BlockContinuousMovementNode(false, false));
	public static final RegistryObject<Block> CABLE_CAR_NODE_UPPER = new RegistryObject<>(() -> new BlockNode.BlockContinuousMovementNode(true, false));
	public static final RegistryObject<Block> CABLE_CAR_NODE_STATION = new RegistryObject<>(() -> new BlockNode.BlockContinuousMovementNode(false, true));
	public static final RegistryObject<Block> AIRPLANE_NODE = new RegistryObject<>(() -> new BlockNode(TransportMode.AIRPLANE));
	public static final RegistryObject<Block> RAILWAY_SIGN_2_EVEN = new RegistryObject<>(() -> new BlockRailwaySign(2, false));
	public static final RegistryObject<Block> RAILWAY_SIGN_2_ODD = new RegistryObject<>(() -> new BlockRailwaySign(2, true));
	public static final RegistryObject<Block> RAILWAY_SIGN_3_EVEN = new RegistryObject<>(() -> new BlockRailwaySign(3, false));
	public static final RegistryObject<Block> RAILWAY_SIGN_3_ODD = new RegistryObject<>(() -> new BlockRailwaySign(3, true));
	public static final RegistryObject<Block> RAILWAY_SIGN_4_EVEN = new RegistryObject<>(() -> new BlockRailwaySign(4, false));
	public static final RegistryObject<Block> RAILWAY_SIGN_4_ODD = new RegistryObject<>(() -> new BlockRailwaySign(4, true));
	public static final RegistryObject<Block> RAILWAY_SIGN_5_EVEN = new RegistryObject<>(() -> new BlockRailwaySign(5, false));
	public static final RegistryObject<Block> RAILWAY_SIGN_5_ODD = new RegistryObject<>(() -> new BlockRailwaySign(5, true));
	public static final RegistryObject<Block> RAILWAY_SIGN_6_EVEN = new RegistryObject<>(() -> new BlockRailwaySign(6, false));
	public static final RegistryObject<Block> RAILWAY_SIGN_6_ODD = new RegistryObject<>(() -> new BlockRailwaySign(6, true));
	public static final RegistryObject<Block> RAILWAY_SIGN_7_EVEN = new RegistryObject<>(() -> new BlockRailwaySign(7, false));
	public static final RegistryObject<Block> RAILWAY_SIGN_7_ODD = new RegistryObject<>(() -> new BlockRailwaySign(7, true));
	public static final RegistryObject<Block> RAILWAY_SIGN_MIDDLE = new RegistryObject<>(() -> new BlockRailwaySign(0, false));
	public static final RegistryObject<Block> RAILWAY_SIGN_POLE = new RegistryObject<>(() -> new BlockRailwaySignPole(BlockBehaviour.Properties.of().requiresCorrectToolForDrops().strength(1).noOcclusion()));
	public static final RegistryObject<Block> ROUTE_SIGN_STANDING_LIGHT = new RegistryObject<>(BlockRouteSignStandingLight::new);
	public static final RegistryObject<Block> ROUTE_SIGN_STANDING_METAL = new RegistryObject<>(BlockRouteSignStandingMetal::new);
	public static final RegistryObject<Block> ROUTE_SIGN_WALL_LIGHT = new RegistryObject<>(BlockRouteSignWallLight::new);
	public static final RegistryObject<Block> ROUTE_SIGN_WALL_METAL = new RegistryObject<>(BlockRouteSignWallMetal::new);
	public static final RegistryObject<Block> RUBBISH_BIN_1 = new RegistryObject<>(() -> new BlockRubbishBin(BlockBehaviour.Properties.of().strength(4)));
	public static final RegistryObject<Block> SIGNAL_LIGHT_2_ASPECT_1 = new RegistryObject<>(() -> new BlockSignalLight2Aspect1(BlockBehaviour.Properties.of().strength(4)));
	public static final RegistryObject<Block> SIGNAL_LIGHT_2_ASPECT_2 = new RegistryObject<>(() -> new BlockSignalLight2Aspect2(BlockBehaviour.Properties.of().strength(4)));
	public static final RegistryObject<Block> SIGNAL_LIGHT_2_ASPECT_3 = new RegistryObject<>(() -> new BlockSignalLight2Aspect3(BlockBehaviour.Properties.of().strength(4)));
	public static final RegistryObject<Block> SIGNAL_LIGHT_2_ASPECT_4 = new RegistryObject<>(() -> new BlockSignalLight2Aspect4(BlockBehaviour.Properties.of().strength(4)));
	public static final RegistryObject<Block> SIGNAL_LIGHT_3_ASPECT_1 = new RegistryObject<>(() -> new BlockSignalLight3Aspect1(BlockBehaviour.Properties.of().strength(4)));
	public static final RegistryObject<Block> SIGNAL_LIGHT_3_ASPECT_2 = new RegistryObject<>(() -> new BlockSignalLight3Aspect2(BlockBehaviour.Properties.of().strength(4)));
	public static final RegistryObject<Block> SIGNAL_LIGHT_4_ASPECT_1 = new RegistryObject<>(() -> new BlockSignalLight4Aspect1(BlockBehaviour.Properties.of().strength(4)));
	public static final RegistryObject<Block> SIGNAL_LIGHT_4_ASPECT_2 = new RegistryObject<>(() -> new BlockSignalLight4Aspect2(BlockBehaviour.Properties.of().strength(4)));
	public static final RegistryObject<Block> SIGNAL_SEMAPHORE_1 = new RegistryObject<>(() -> new BlockSignalSemaphore1(BlockBehaviour.Properties.of().strength(4)));
	public static final RegistryObject<Block> SIGNAL_SEMAPHORE_2 = new RegistryObject<>(() -> new BlockSignalSemaphore2(BlockBehaviour.Properties.of().strength(4)));
	public static final RegistryObject<Block> SIGNAL_POLE = new RegistryObject<>(() -> new BlockStationColorPole(BlockBehaviour.Properties.of().requiresCorrectToolForDrops().strength(2).noOcclusion(), false));

	public static final RegistryObject<Block> STATION_COLOR_ANDESITE = new RegistryObject<>(() -> new BlockStationColor(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.ANDESITE)));
	public static final RegistryObject<Block> STATION_COLOR_BEDROCK = new RegistryObject<>(() -> new BlockStationColor(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.STONE)));
	public static final RegistryObject<Block> STATION_COLOR_BIRCH_WOOD = new RegistryObject<>(() -> new BlockStationColor(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.BIRCH_WOOD)));
	public static final RegistryObject<Block> STATION_COLOR_BONE_BLOCK = new RegistryObject<>(() -> new BlockStationColor(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.BONE_BLOCK)));
	public static final RegistryObject<Block> STATION_COLOR_CHISELED_QUARTZ_BLOCK = new RegistryObject<>(() -> new BlockStationColor(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.CHISELED_QUARTZ_BLOCK)));
	public static final RegistryObject<Block> STATION_COLOR_CHISELED_STONE_BRICKS = new RegistryObject<>(() -> new BlockStationColor(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.CHISELED_STONE_BRICKS)));
	public static final RegistryObject<Block> STATION_COLOR_CLAY = new RegistryObject<>(() -> new BlockStationColor(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.CLAY)));
	public static final RegistryObject<Block> STATION_COLOR_COAL_ORE = new RegistryObject<>(() -> new BlockStationColor(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.COAL_ORE)));
	public static final RegistryObject<Block> STATION_COLOR_COBBLESTONE = new RegistryObject<>(() -> new BlockStationColor(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.COBBLESTONE)));
	public static final RegistryObject<Block> STATION_COLOR_CONCRETE = new RegistryObject<>(() -> new BlockStationColor(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.WHITE_CONCRETE)));
	public static final RegistryObject<Block> STATION_COLOR_CONCRETE_POWDER = new RegistryObject<>(() -> new BlockStationColor(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.WHITE_CONCRETE_POWDER)));
	public static final RegistryObject<Block> STATION_COLOR_CRACKED_STONE_BRICKS = new RegistryObject<>(() -> new BlockStationColor(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.CRACKED_STONE_BRICKS)));
	public static final RegistryObject<Block> STATION_COLOR_DARK_PRISMARINE = new RegistryObject<>(() -> new BlockStationColor(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.DARK_PRISMARINE)));
	public static final RegistryObject<Block> STATION_COLOR_DIORITE = new RegistryObject<>(() -> new BlockStationColor(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.DIORITE)));
	public static final RegistryObject<Block> STATION_COLOR_GRAVEL = new RegistryObject<>(() -> new BlockStationColor(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.GRAVEL)));
	public static final RegistryObject<Block> STATION_COLOR_IRON_BLOCK = new RegistryObject<>(() -> new BlockStationColor(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.IRON_BLOCK)));
	public static final RegistryObject<Block> STATION_COLOR_METAL = new RegistryObject<>(() -> new BlockStationColor(BlockBehaviour.Properties.of().requiresCorrectToolForDrops().strength(2).lightLevel(state -> 10)));
	public static final RegistryObject<Block> STATION_COLOR_MOSAIC_TILE = new RegistryObject<>(() -> new BlockStationColor(BlockBehaviour.Properties.of().requiresCorrectToolForDrops().strength(2)));
	public static final RegistryObject<Block> STATION_COLOR_PLANKS = new RegistryObject<>(() -> new BlockStationColor(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.OAK_PLANKS)));
	public static final RegistryObject<Block> STATION_COLOR_POLE = new RegistryObject<>(() -> new BlockStationColorPole(BlockBehaviour.Properties.of().requiresCorrectToolForDrops().strength(2).noOcclusion(), true));
	public static final RegistryObject<Block> STATION_COLOR_POLISHED_ANDESITE = new RegistryObject<>(() -> new BlockStationColor(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.POLISHED_ANDESITE)));
	public static final RegistryObject<Block> STATION_COLOR_POLISHED_DIORITE = new RegistryObject<>(() -> new BlockStationColor(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.POLISHED_DIORITE)));
	public static final RegistryObject<Block> STATION_COLOR_PURPUR_BLOCK = new RegistryObject<>(() -> new BlockStationColor(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.PURPUR_BLOCK)));
	public static final RegistryObject<Block> STATION_COLOR_PURPUR_PILLAR = new RegistryObject<>(() -> new BlockStationColor(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.PURPUR_PILLAR)));
	public static final RegistryObject<Block> STATION_COLOR_QUARTZ_BLOCK = new RegistryObject<>(() -> new BlockStationColor(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.QUARTZ_BLOCK)));
	public static final RegistryObject<Block> STATION_COLOR_QUARTZ_BRICKS = new RegistryObject<>(() -> new BlockStationColor(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.QUARTZ_BRICKS)));
	public static final RegistryObject<Block> STATION_COLOR_QUARTZ_PILLAR = new RegistryObject<>(() -> new BlockStationColor(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.QUARTZ_PILLAR)));
	public static final RegistryObject<Block> STATION_COLOR_SMOOTH_QUARTZ = new RegistryObject<>(() -> new BlockStationColor(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.SMOOTH_QUARTZ)));
	public static final RegistryObject<Block> STATION_COLOR_SMOOTH_STONE = new RegistryObject<>(() -> new BlockStationColor(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.SMOOTH_STONE)));
	public static final RegistryObject<Block> STATION_COLOR_SNOW_BLOCK = new RegistryObject<>(() -> new BlockStationColor(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.WHITE_WOOL)));
	public static final RegistryObject<Block> STATION_COLOR_STAINED_GLASS = new RegistryObject<>(() -> new BlockStationColorGlass(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.WHITE_STAINED_GLASS)));
	public static final RegistryObject<Block> STATION_COLOR_STONE = new RegistryObject<>(() -> new BlockStationColor(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.STONE)));
	public static final RegistryObject<Block> STATION_COLOR_STONE_BRICKS = new RegistryObject<>(() -> new BlockStationColor(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.STONE_BRICKS)));
	public static final RegistryObject<Block> STATION_COLOR_WOOL = new RegistryObject<>(() -> new BlockStationColor(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.WHITE_WOOL)));

	public static final RegistryObject<Block> STATION_COLOR_ANDESITE_SLAB = new RegistryObject<>(() -> new BlockStationColorSlab(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.ANDESITE)));
	public static final RegistryObject<Block> STATION_COLOR_BEDROCK_SLAB = new RegistryObject<>(() -> new BlockStationColorSlab(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.STONE)));
	public static final RegistryObject<Block> STATION_COLOR_BIRCH_WOOD_SLAB = new RegistryObject<>(() -> new BlockStationColorSlab(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.BIRCH_WOOD)));
	public static final RegistryObject<Block> STATION_COLOR_BONE_BLOCK_SLAB = new RegistryObject<>(() -> new BlockStationColorSlab(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.BONE_BLOCK)));
	public static final RegistryObject<Block> STATION_COLOR_CHISELED_QUARTZ_BLOCK_SLAB = new RegistryObject<>(() -> new BlockStationColorSlab(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.CHISELED_QUARTZ_BLOCK)));
	public static final RegistryObject<Block> STATION_COLOR_CHISELED_STONE_BRICKS_SLAB = new RegistryObject<>(() -> new BlockStationColorSlab(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.CHISELED_STONE_BRICKS)));
	public static final RegistryObject<Block> STATION_COLOR_CLAY_SLAB = new RegistryObject<>(() -> new BlockStationColorSlab(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.CLAY)));
	public static final RegistryObject<Block> STATION_COLOR_COAL_ORE_SLAB = new RegistryObject<>(() -> new BlockStationColorSlab(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.COAL_ORE)));
	public static final RegistryObject<Block> STATION_COLOR_COBBLESTONE_SLAB = new RegistryObject<>(() -> new BlockStationColorSlab(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.COBBLESTONE)));
	public static final RegistryObject<Block> STATION_COLOR_CONCRETE_SLAB = new RegistryObject<>(() -> new BlockStationColorSlab(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.WHITE_CONCRETE)));
	public static final RegistryObject<Block> STATION_COLOR_CONCRETE_POWDER_SLAB = new RegistryObject<>(() -> new BlockStationColorSlab(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.WHITE_CONCRETE_POWDER)));
	public static final RegistryObject<Block> STATION_COLOR_CRACKED_STONE_BRICKS_SLAB = new RegistryObject<>(() -> new BlockStationColorSlab(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.CRACKED_STONE_BRICKS)));
	public static final RegistryObject<Block> STATION_COLOR_DARK_PRISMARINE_SLAB = new RegistryObject<>(() -> new BlockStationColorSlab(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.DARK_PRISMARINE)));
	public static final RegistryObject<Block> STATION_COLOR_DIORITE_SLAB = new RegistryObject<>(() -> new BlockStationColorSlab(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.DIORITE)));
	public static final RegistryObject<Block> STATION_COLOR_GRAVEL_SLAB = new RegistryObject<>(() -> new BlockStationColorSlab(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.GRAVEL)));
	public static final RegistryObject<Block> STATION_COLOR_IRON_BLOCK_SLAB = new RegistryObject<>(() -> new BlockStationColorSlab(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.IRON_BLOCK)));
	public static final RegistryObject<Block> STATION_COLOR_METAL_SLAB = new RegistryObject<>(() -> new BlockStationColorSlab(BlockBehaviour.Properties.of().requiresCorrectToolForDrops().strength(2).lightLevel(state -> 10)));
	public static final RegistryObject<Block> STATION_COLOR_MOSAIC_TILE_SLAB = new RegistryObject<>(() -> new BlockStationColorSlab(BlockBehaviour.Properties.of().requiresCorrectToolForDrops().strength(2)));
	public static final RegistryObject<Block> STATION_COLOR_PLANKS_SLAB = new RegistryObject<>(() -> new BlockStationColorSlab(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.OAK_PLANKS)));
	public static final RegistryObject<Block> STATION_COLOR_POLISHED_ANDESITE_SLAB = new RegistryObject<>(() -> new BlockStationColorSlab(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.POLISHED_ANDESITE)));
	public static final RegistryObject<Block> STATION_COLOR_POLISHED_DIORITE_SLAB = new RegistryObject<>(() -> new BlockStationColorSlab(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.POLISHED_DIORITE)));
	public static final RegistryObject<Block> STATION_COLOR_PURPUR_BLOCK_SLAB = new RegistryObject<>(() -> new BlockStationColorSlab(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.PURPUR_BLOCK)));
	public static final RegistryObject<Block> STATION_COLOR_PURPUR_PILLAR_SLAB = new RegistryObject<>(() -> new BlockStationColorSlab(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.PURPUR_PILLAR)));
	public static final RegistryObject<Block> STATION_COLOR_QUARTZ_BLOCK_SLAB = new RegistryObject<>(() -> new BlockStationColorSlab(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.QUARTZ_BLOCK)));
	public static final RegistryObject<Block> STATION_COLOR_QUARTZ_BRICKS_SLAB = new RegistryObject<>(() -> new BlockStationColorSlab(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.QUARTZ_BRICKS)));
	public static final RegistryObject<Block> STATION_COLOR_QUARTZ_PILLAR_SLAB = new RegistryObject<>(() -> new BlockStationColorSlab(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.QUARTZ_PILLAR)));
	public static final RegistryObject<Block> STATION_COLOR_SMOOTH_QUARTZ_SLAB = new RegistryObject<>(() -> new BlockStationColorSlab(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.SMOOTH_QUARTZ)));
	public static final RegistryObject<Block> STATION_COLOR_SMOOTH_STONE_SLAB = new RegistryObject<>(() -> new BlockStationColorSlab(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.SMOOTH_STONE)));
	public static final RegistryObject<Block> STATION_COLOR_SNOW_BLOCK_SLAB = new RegistryObject<>(() -> new BlockStationColorSlab(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.WHITE_WOOL)));
	public static final RegistryObject<Block> STATION_COLOR_STAINED_GLASS_SLAB = new RegistryObject<>(() -> new BlockStationColorGlassSlab(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.WHITE_STAINED_GLASS).noOcclusion()));
	public static final RegistryObject<Block> STATION_COLOR_STONE_SLAB = new RegistryObject<>(() -> new BlockStationColorSlab(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.STONE)));
	public static final RegistryObject<Block> STATION_COLOR_STONE_BRICKS_SLAB = new RegistryObject<>(() -> new BlockStationColorSlab(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.STONE_BRICKS)));
	public static final RegistryObject<Block> STATION_COLOR_WOOL_SLAB = new RegistryObject<>(() -> new BlockStationColorSlab(BlockBehaviour.Properties.ofFullCopy(net.minecraft.world.level.block.Blocks.WHITE_WOOL)));

	public static final RegistryObject<Block> STATION_NAME_ENTRANCE = new RegistryObject<>(() -> new BlockStationNameEntrance(BlockBehaviour.Properties.of().requiresCorrectToolForDrops().strength(2).noOcclusion()));
	public static final RegistryObject<Block> STATION_NAME_TALL_BLOCK = new RegistryObject<>(BlockStationNameTallBlock::new);
	public static final RegistryObject<Block> STATION_NAME_TALL_BLOCK_DOUBLE_SIDED = new RegistryObject<>(BlockStationNameTallBlockDoubleSided::new);
	public static final RegistryObject<Block> STATION_NAME_TALL_WALL = new RegistryObject<>(BlockStationNameTallWall::new);
	public static final RegistryObject<Block> STATION_NAME_WALL_WHITE = new RegistryObject<>(() -> new BlockStationNameWallWhite(BlockBehaviour.Properties.of().requiresCorrectToolForDrops().strength(2).noOcclusion()));
	public static final RegistryObject<Block> STATION_NAME_WALL_GRAY = new RegistryObject<>(() -> new BlockStationNameWallGray(BlockBehaviour.Properties.of().requiresCorrectToolForDrops().strength(2).noOcclusion()));
	public static final RegistryObject<Block> STATION_NAME_WALL_BLACK = new RegistryObject<>(() -> new BlockStationNameWallBlack(BlockBehaviour.Properties.of().requiresCorrectToolForDrops().strength(2).noOcclusion()));
	public static final RegistryObject<Block> TACTILE_MAP = new RegistryObject<>(() -> new BlockTactileMap(BlockBehaviour.Properties.of().requiresCorrectToolForDrops().strength(2).noOcclusion()));
	public static final RegistryObject<Block> TICKET_BARRIER_ENTRANCE_1 = new RegistryObject<>(() -> new BlockTicketBarrier(true));
	public static final RegistryObject<Block> TICKET_BARRIER_EXIT_1 = new RegistryObject<>(() -> new BlockTicketBarrier(false));
	public static final RegistryObject<Block> TICKET_MACHINE = new RegistryObject<>(() -> new BlockTicketMachine(BlockBehaviour.Properties.of().requiresCorrectToolForDrops().strength(2).lightLevel(state -> 5).noOcclusion()));
	public static final RegistryObject<Block> TICKET_PROCESSOR = new RegistryObject<>(() -> new BlockTicketProcessor(true, true, true));
	public static final RegistryObject<Block> TICKET_PROCESSOR_ENTRANCE = new RegistryObject<>(() -> new BlockTicketProcessor(true, true, false));
	public static final RegistryObject<Block> TICKET_PROCESSOR_EXIT = new RegistryObject<>(() -> new BlockTicketProcessor(true, false, true));
	public static final RegistryObject<Block> TICKET_PROCESSOR_ENQUIRY = new RegistryObject<>(BlockTicketProcessorEnquiry::new);
	public static final RegistryObject<Block> TRAIN_ANNOUNCER = new RegistryObject<>(BlockTrainAnnouncer::new);
	public static final RegistryObject<Block> TRAIN_CARGO_LOADER = new RegistryObject<>(BlockTrainCargoLoader::new);
	public static final RegistryObject<Block> TRAIN_CARGO_UNLOADER = new RegistryObject<>(BlockTrainCargoUnloader::new);
	public static final RegistryObject<Block> TRAIN_REDSTONE_SENSOR = new RegistryObject<>(BlockTrainRedstoneSensor::new);
	public static final RegistryObject<Block> TRAIN_SCHEDULE_SENSOR = new RegistryObject<>(BlockTrainScheduleSensor::new);

	public static void register(MTR.RegisterCallback<RegistryObject<Block>> registerBlock, MTR.RegisterBlockItem registerBlockItem, MTR.RegisterBlockItem registerEnchantedBlockItem) {
		registerBlock.register("escalator_side", ESCALATOR_SIDE);
		registerBlock.register("escalator_step", ESCALATOR_STEP);
		registerBlockItem.accept("lift_buttons_1", LIFT_BUTTONS_1, CreativeModeTabs.ESCALATORS_LIFTS);
		registerBlockItem.accept("lift_panel_even_1", LIFT_PANEL_EVEN_1, CreativeModeTabs.ESCALATORS_LIFTS);
		registerBlockItem.accept("lift_panel_odd_1", LIFT_PANEL_ODD_1, CreativeModeTabs.ESCALATORS_LIFTS);
		registerBlockItem.accept("lift_panel_even_2", LIFT_PANEL_EVEN_2, CreativeModeTabs.ESCALATORS_LIFTS);
		registerBlockItem.accept("lift_panel_odd_2", LIFT_PANEL_ODD_2, CreativeModeTabs.ESCALATORS_LIFTS);
		registerBlock.register("lift_door_1", LIFT_DOOR_EVEN_1);
		registerBlock.register("lift_door_odd_1", LIFT_DOOR_ODD_1);
		registerBlockItem.accept("lift_track_1", LIFT_TRACK_1, CreativeModeTabs.ESCALATORS_LIFTS);
		registerBlockItem.accept("lift_track_floor_1", LIFT_TRACK_FLOOR_1, CreativeModeTabs.ESCALATORS_LIFTS);

		if(!Keys.LIFTS_ONLY) {
			registerBlockItem.accept("rail", RAIL_NODE, CreativeModeTabs.CORE);
			registerBlock.register("boat_node", BOAT_NODE);
			registerBlockItem.accept("cable_car_node_lower", CABLE_CAR_NODE_LOWER, CreativeModeTabs.CORE);
			registerBlockItem.accept("cable_car_node_upper", CABLE_CAR_NODE_UPPER, CreativeModeTabs.CORE);
			registerBlockItem.accept("cable_car_node_station", CABLE_CAR_NODE_STATION, CreativeModeTabs.CORE);
			registerBlockItem.accept("airplane_node", AIRPLANE_NODE, CreativeModeTabs.CORE);
			registerBlock.register("apg_door", APG_DOOR);
			registerBlock.register("apg_glass", APG_GLASS);
			registerBlock.register("apg_glass_end", APG_GLASS_END);
			registerBlockItem.accept("arrival_projector_1_small", ARRIVAL_PROJECTOR_1_SMALL, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("arrival_projector_1_medium", ARRIVAL_PROJECTOR_1_MEDIUM, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("arrival_projector_1_large", ARRIVAL_PROJECTOR_1_LARGE, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("ceiling", CEILING, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("ceiling_light", CEILING_LIGHT, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("ceiling_no_light", CEILING_NO_LIGHT, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("clock", CLOCK, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("clock_pole", CLOCK_POLE, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("glass_fence_cio", GLASS_FENCE_CIO, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("glass_fence_ckt", GLASS_FENCE_CKT, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("glass_fence_heo", GLASS_FENCE_HEO, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("glass_fence_mos", GLASS_FENCE_MOS, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("glass_fence_plain", GLASS_FENCE_PLAIN, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("glass_fence_shm", GLASS_FENCE_SHM, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("glass_fence_stained", GLASS_FENCE_STAINED, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("glass_fence_stw", GLASS_FENCE_STW, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("glass_fence_tsh", GLASS_FENCE_TSH, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("glass_fence_wks", GLASS_FENCE_WKS, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("logo", LOGO, CreativeModeTabs.STATION_BUILDING_BLOCKS);
			registerBlockItem.accept("marble_blue", MARBLE_BLUE, CreativeModeTabs.STATION_BUILDING_BLOCKS);
			registerBlockItem.accept("marble_sandy", MARBLE_SANDY, CreativeModeTabs.STATION_BUILDING_BLOCKS);
			registerBlockItem.accept("marble_blue_slab", MARBLE_BLUE_SLAB, CreativeModeTabs.STATION_BUILDING_BLOCKS);
			registerBlockItem.accept("marble_sandy_slab", MARBLE_SANDY_SLAB, CreativeModeTabs.STATION_BUILDING_BLOCKS);
			registerBlockItem.accept("metal", METAL, CreativeModeTabs.STATION_BUILDING_BLOCKS);
			registerBlockItem.accept("metal_slab", METAL_SLAB, CreativeModeTabs.STATION_BUILDING_BLOCKS);
			registerBlockItem.accept("mosaic_tile", MOSAIC_TILE, CreativeModeTabs.STATION_BUILDING_BLOCKS);
			registerBlockItem.accept("mosaic_tile_slab", MOSAIC_TILE_SLAB, CreativeModeTabs.STATION_BUILDING_BLOCKS);
			registerBlockItem.accept("pids_1", PIDS_1, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("pids_2", PIDS_2, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("pids_3", PIDS_3, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("pids_4", PIDS_4, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("pids_single_arrival_1", PIDS_SINGLE_ARRIVAL_1, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("pids_pole", PIDS_POLE, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("platform", PLATFORM, CreativeModeTabs.STATION_BUILDING_BLOCKS);
			registerBlockItem.accept("platform_indented", PLATFORM_INDENTED, CreativeModeTabs.STATION_BUILDING_BLOCKS);
			registerBlockItem.accept("platform_na_1", PLATFORM_NA_1, CreativeModeTabs.STATION_BUILDING_BLOCKS);
			registerBlockItem.accept("platform_na_1_indented", PLATFORM_NA_1_INDENTED, CreativeModeTabs.STATION_BUILDING_BLOCKS);
			registerBlockItem.accept("platform_na_2", PLATFORM_NA_2, CreativeModeTabs.STATION_BUILDING_BLOCKS);
			registerBlockItem.accept("platform_na_2_indented", PLATFORM_NA_2_INDENTED, CreativeModeTabs.STATION_BUILDING_BLOCKS);
			registerBlockItem.accept("platform_uk_1", PLATFORM_UK_1, CreativeModeTabs.STATION_BUILDING_BLOCKS);
			registerBlockItem.accept("platform_uk_1_indented", PLATFORM_UK_1_INDENTED, CreativeModeTabs.STATION_BUILDING_BLOCKS);
			registerBlock.register("psd_door", PSD_DOOR_1);
			registerBlock.register("psd_glass", PSD_GLASS_1);
			registerBlock.register("psd_glass_end", PSD_GLASS_END_1);
			registerBlock.register("psd_door_2", PSD_DOOR_2);
			registerBlock.register("psd_glass_2", PSD_GLASS_2);
			registerBlock.register("psd_glass_end_2", PSD_GLASS_END_2);
			registerBlock.register("psd_top", PSD_TOP);
			registerBlockItem.accept("railway_sign_2_even", RAILWAY_SIGN_2_EVEN, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("railway_sign_2_odd", RAILWAY_SIGN_2_ODD, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("railway_sign_3_even", RAILWAY_SIGN_3_EVEN, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("railway_sign_3_odd", RAILWAY_SIGN_3_ODD, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("railway_sign_4_even", RAILWAY_SIGN_4_EVEN, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("railway_sign_4_odd", RAILWAY_SIGN_4_ODD, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("railway_sign_5_even", RAILWAY_SIGN_5_EVEN, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("railway_sign_5_odd", RAILWAY_SIGN_5_ODD, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("railway_sign_6_even", RAILWAY_SIGN_6_EVEN, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("railway_sign_6_odd", RAILWAY_SIGN_6_ODD, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("railway_sign_7_even", RAILWAY_SIGN_7_EVEN, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("railway_sign_7_odd", RAILWAY_SIGN_7_ODD, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlock.register("railway_sign_middle", RAILWAY_SIGN_MIDDLE);
			registerBlockItem.accept("railway_sign_pole", RAILWAY_SIGN_POLE, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("route_sign_standing_light", ROUTE_SIGN_STANDING_LIGHT, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("route_sign_standing_metal", ROUTE_SIGN_STANDING_METAL, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("route_sign_wall_light", ROUTE_SIGN_WALL_LIGHT, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("route_sign_wall_metal", ROUTE_SIGN_WALL_METAL, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("rubbish_bin_1", RUBBISH_BIN_1, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("signal_light_1", SIGNAL_LIGHT_2_ASPECT_1, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("signal_light_2", SIGNAL_LIGHT_2_ASPECT_2, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("signal_light_3", SIGNAL_LIGHT_2_ASPECT_3, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("signal_light_4", SIGNAL_LIGHT_2_ASPECT_4, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("signal_light_3_aspect_1", SIGNAL_LIGHT_3_ASPECT_1, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("signal_light_3_aspect_2", SIGNAL_LIGHT_3_ASPECT_2, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("signal_light_4_aspect_1", SIGNAL_LIGHT_4_ASPECT_1, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("signal_light_4_aspect_2", SIGNAL_LIGHT_4_ASPECT_2, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("signal_semaphore_1", SIGNAL_SEMAPHORE_1, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("signal_semaphore_2", SIGNAL_SEMAPHORE_2, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("signal_pole", SIGNAL_POLE, CreativeModeTabs.RAILWAY_FACILITIES);

			registerBlockItem.accept("station_name_entrance", STATION_NAME_ENTRANCE, CreativeModeTabs.RAILWAY_FACILITIES);
			registerEnchantedBlockItem.accept("station_name_tall_block", STATION_NAME_TALL_BLOCK, CreativeModeTabs.RAILWAY_FACILITIES);
			registerEnchantedBlockItem.accept("station_name_tall_block_double_sided", STATION_NAME_TALL_BLOCK_DOUBLE_SIDED, CreativeModeTabs.RAILWAY_FACILITIES);
			registerEnchantedBlockItem.accept("station_name_tall_wall", STATION_NAME_TALL_WALL, CreativeModeTabs.RAILWAY_FACILITIES);
			registerEnchantedBlockItem.accept("station_name_wall", STATION_NAME_WALL_WHITE, CreativeModeTabs.RAILWAY_FACILITIES);
			registerEnchantedBlockItem.accept("station_name_wall_gray", STATION_NAME_WALL_GRAY, CreativeModeTabs.RAILWAY_FACILITIES);
			registerEnchantedBlockItem.accept("station_name_wall_black", STATION_NAME_WALL_BLACK, CreativeModeTabs.RAILWAY_FACILITIES);
			registerEnchantedBlockItem.accept("station_pole", STATION_COLOR_POLE, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("tactile_map", TACTILE_MAP, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("ticket_barrier_entrance_1", TICKET_BARRIER_ENTRANCE_1, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("ticket_barrier_exit_1", TICKET_BARRIER_EXIT_1, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("ticket_machine", TICKET_MACHINE, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("ticket_processor", TICKET_PROCESSOR, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("ticket_processor_entrance", TICKET_PROCESSOR_ENTRANCE, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("ticket_processor_exit", TICKET_PROCESSOR_EXIT, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("ticket_processor_enquiry", TICKET_PROCESSOR_ENQUIRY, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("train_announcer", TRAIN_ANNOUNCER, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("train_cargo_loader", TRAIN_CARGO_LOADER, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("train_cargo_unloader", TRAIN_CARGO_UNLOADER, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("train_sensor", TRAIN_REDSTONE_SENSOR, CreativeModeTabs.RAILWAY_FACILITIES);
			registerBlockItem.accept("train_schedule_sensor", TRAIN_SCHEDULE_SENSOR, CreativeModeTabs.RAILWAY_FACILITIES);

			registerStationColoredVanillaBlocks(registerEnchantedBlockItem);
		}
	}

	private static void registerStationColoredVanillaBlocks(MTR.RegisterBlockItem registerEnchantedBlockItem) {
		registerEnchantedBlockItem.accept("station_color_andesite", STATION_COLOR_ANDESITE, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_bedrock", STATION_COLOR_BEDROCK, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_birch_wood", STATION_COLOR_BIRCH_WOOD, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_bone_block", STATION_COLOR_BONE_BLOCK, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_chiseled_quartz_block", STATION_COLOR_CHISELED_QUARTZ_BLOCK, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_chiseled_stone_bricks", STATION_COLOR_CHISELED_STONE_BRICKS, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_clay", STATION_COLOR_CLAY, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_coal_ore", STATION_COLOR_COAL_ORE, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_cobblestone", STATION_COLOR_COBBLESTONE, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_concrete", STATION_COLOR_CONCRETE, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_concrete_powder", STATION_COLOR_CONCRETE_POWDER, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_cracked_stone_bricks", STATION_COLOR_CRACKED_STONE_BRICKS, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_dark_prismarine", STATION_COLOR_DARK_PRISMARINE, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_diorite", STATION_COLOR_DIORITE, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_gravel", STATION_COLOR_GRAVEL, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_iron_block", STATION_COLOR_IRON_BLOCK, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_metal", STATION_COLOR_METAL, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_mosaic_tile", STATION_COLOR_MOSAIC_TILE, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_planks", STATION_COLOR_PLANKS, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_polished_andesite", STATION_COLOR_POLISHED_ANDESITE, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_polished_diorite", STATION_COLOR_POLISHED_DIORITE, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_purpur_block", STATION_COLOR_PURPUR_BLOCK, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_purpur_pillar", STATION_COLOR_PURPUR_PILLAR, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_quartz_block", STATION_COLOR_QUARTZ_BLOCK, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_quartz_bricks", STATION_COLOR_QUARTZ_BRICKS, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_quartz_pillar", STATION_COLOR_QUARTZ_PILLAR, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_smooth_quartz", STATION_COLOR_SMOOTH_QUARTZ, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_smooth_stone", STATION_COLOR_SMOOTH_STONE, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_snow_block", STATION_COLOR_SNOW_BLOCK, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_stained_glass", STATION_COLOR_STAINED_GLASS, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_stone", STATION_COLOR_STONE, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_stone_bricks", STATION_COLOR_STONE_BRICKS, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_wool", STATION_COLOR_WOOL, CreativeModeTabs.STATION_BUILDING_BLOCKS);

		registerEnchantedBlockItem.accept("station_color_andesite_slab", STATION_COLOR_ANDESITE_SLAB, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_bedrock_slab", STATION_COLOR_BEDROCK_SLAB, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_birch_wood_slab", STATION_COLOR_BIRCH_WOOD_SLAB, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_bone_block_slab", STATION_COLOR_BONE_BLOCK_SLAB, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_chiseled_quartz_block_slab", STATION_COLOR_CHISELED_QUARTZ_BLOCK_SLAB, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_chiseled_stone_bricks_slab", STATION_COLOR_CHISELED_STONE_BRICKS_SLAB, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_clay_slab", STATION_COLOR_CLAY_SLAB, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_coal_ore_slab", STATION_COLOR_COAL_ORE_SLAB, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_cobblestone_slab", STATION_COLOR_COBBLESTONE_SLAB, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_concrete_slab", STATION_COLOR_CONCRETE_SLAB, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_concrete_powder_slab", STATION_COLOR_CONCRETE_POWDER_SLAB, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_cracked_stone_bricks_slab", STATION_COLOR_CRACKED_STONE_BRICKS_SLAB, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_dark_prismarine_slab", STATION_COLOR_DARK_PRISMARINE_SLAB, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_diorite_slab", STATION_COLOR_DIORITE_SLAB, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_gravel_slab", STATION_COLOR_GRAVEL_SLAB, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_iron_block_slab", STATION_COLOR_IRON_BLOCK_SLAB, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_metal_slab", STATION_COLOR_METAL_SLAB, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_mosaic_tile_slab", STATION_COLOR_MOSAIC_TILE_SLAB, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_planks_slab", STATION_COLOR_PLANKS_SLAB, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_polished_andesite_slab", STATION_COLOR_POLISHED_ANDESITE_SLAB, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_polished_diorite_slab", STATION_COLOR_POLISHED_DIORITE_SLAB, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_purpur_block_slab", STATION_COLOR_PURPUR_BLOCK_SLAB, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_purpur_pillar_slab", STATION_COLOR_PURPUR_PILLAR_SLAB, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_quartz_block_slab", STATION_COLOR_QUARTZ_BLOCK_SLAB, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_quartz_bricks_slab", STATION_COLOR_QUARTZ_BRICKS_SLAB, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_quartz_pillar_slab", STATION_COLOR_QUARTZ_PILLAR_SLAB, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_smooth_quartz_slab", STATION_COLOR_SMOOTH_QUARTZ_SLAB, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_smooth_stone_slab", STATION_COLOR_SMOOTH_STONE_SLAB, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_snow_block_slab", STATION_COLOR_SNOW_BLOCK_SLAB, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_stained_glass_slab", STATION_COLOR_STAINED_GLASS_SLAB, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_stone_slab", STATION_COLOR_STONE_SLAB, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_stone_bricks_slab", STATION_COLOR_STONE_BRICKS_SLAB, CreativeModeTabs.STATION_BUILDING_BLOCKS);
		registerEnchantedBlockItem.accept("station_color_wool_slab", STATION_COLOR_WOOL_SLAB, CreativeModeTabs.STATION_BUILDING_BLOCKS);
	}

	public static void registerClient() {
		if (!Keys.LIFTS_ONLY) {
			RegistryClient.registerBlockRenderType(RenderType.cutout(), APG_DOOR.get());
			RegistryClient.registerBlockRenderType(RenderType.cutout(), APG_GLASS.get());
			RegistryClient.registerBlockRenderType(RenderType.cutout(), APG_GLASS_END.get());
			RegistryClient.registerBlockRenderType(RenderType.cutout(), CABLE_CAR_NODE_LOWER.get());
			RegistryClient.registerBlockRenderType(RenderType.cutout(), CABLE_CAR_NODE_UPPER.get());
			RegistryClient.registerBlockRenderType(RenderType.cutout(), CLOCK.get());
			RegistryClient.registerBlockRenderType(RenderType.translucent(), GLASS_FENCE_CIO.get());
			RegistryClient.registerBlockRenderType(RenderType.translucent(), GLASS_FENCE_CKT.get());
			RegistryClient.registerBlockRenderType(RenderType.translucent(), GLASS_FENCE_HEO.get());
			RegistryClient.registerBlockRenderType(RenderType.translucent(), GLASS_FENCE_MOS.get());
			RegistryClient.registerBlockRenderType(RenderType.translucent(), GLASS_FENCE_PLAIN.get());
			RegistryClient.registerBlockRenderType(RenderType.translucent(), GLASS_FENCE_SHM.get());
			RegistryClient.registerBlockRenderType(RenderType.translucent(), GLASS_FENCE_STAINED.get());
			RegistryClient.registerBlockRenderType(RenderType.translucent(), GLASS_FENCE_STW.get());
			RegistryClient.registerBlockRenderType(RenderType.translucent(), GLASS_FENCE_TSH.get());
			RegistryClient.registerBlockRenderType(RenderType.translucent(), GLASS_FENCE_WKS.get());
			RegistryClient.registerBlockRenderType(RenderType.cutout(), LOGO.get());
			RegistryClient.registerBlockRenderType(RenderType.cutout(), PLATFORM.get());
			RegistryClient.registerBlockRenderType(RenderType.cutout(), PLATFORM_INDENTED.get());
			RegistryClient.registerBlockRenderType(RenderType.cutout(), PLATFORM_NA_1.get());
			RegistryClient.registerBlockRenderType(RenderType.cutout(), PLATFORM_NA_1_INDENTED.get());
			RegistryClient.registerBlockRenderType(RenderType.cutout(), PLATFORM_NA_2.get());
			RegistryClient.registerBlockRenderType(RenderType.cutout(), PLATFORM_NA_2_INDENTED.get());
			RegistryClient.registerBlockRenderType(RenderType.cutout(), PLATFORM_UK_1.get());
			RegistryClient.registerBlockRenderType(RenderType.cutout(), PLATFORM_UK_1_INDENTED.get());
			RegistryClient.registerBlockRenderType(RenderType.cutout(), PSD_DOOR_1.get());
			RegistryClient.registerBlockRenderType(RenderType.cutout(), PSD_GLASS_1.get());
			RegistryClient.registerBlockRenderType(RenderType.cutout(), PSD_GLASS_END_1.get());
			RegistryClient.registerBlockRenderType(RenderType.cutout(), PSD_DOOR_2.get());
			RegistryClient.registerBlockRenderType(RenderType.cutout(), PSD_GLASS_2.get());
			RegistryClient.registerBlockRenderType(RenderType.cutout(), PSD_GLASS_END_2.get());
			RegistryClient.registerBlockRenderType(RenderType.cutout(), RUBBISH_BIN_1.get());
			RegistryClient.registerBlockRenderType(RenderType.translucent(), STATION_COLOR_STAINED_GLASS.get());
			RegistryClient.registerBlockRenderType(RenderType.translucent(), STATION_COLOR_STAINED_GLASS_SLAB.get());
			RegistryClient.registerBlockRenderType(RenderType.cutout(), STATION_NAME_TALL_BLOCK.get());
			RegistryClient.registerBlockRenderType(RenderType.cutout(), STATION_NAME_TALL_BLOCK_DOUBLE_SIDED.get());
			RegistryClient.registerBlockRenderType(RenderType.cutout(), STATION_NAME_TALL_WALL.get());
			RegistryClient.registerBlockRenderType(RenderType.cutout(), TICKET_BARRIER_ENTRANCE_1.get());
			RegistryClient.registerBlockRenderType(RenderType.cutout(), TICKET_BARRIER_EXIT_1.get());
			RegistryClient.registerBlockRenderType(RenderType.cutout(), TICKET_MACHINE.get());
			RegistryClient.registerBlockRenderType(RenderType.cutout(), TICKET_PROCESSOR.get());
			RegistryClient.registerBlockRenderType(RenderType.cutout(), TICKET_PROCESSOR_ENTRANCE.get());
			RegistryClient.registerBlockRenderType(RenderType.cutout(), TICKET_PROCESSOR_EXIT.get());
			RegistryClient.registerBlockRenderType(RenderType.cutout(), TICKET_PROCESSOR_ENQUIRY.get());
			RegistryClient.registerBlockRenderType(RenderType.cutout(), TRAIN_ANNOUNCER.get());
			RegistryClient.registerBlockRenderType(RenderType.cutout(), TRAIN_CARGO_LOADER.get());
			RegistryClient.registerBlockRenderType(RenderType.cutout(), TRAIN_CARGO_UNLOADER.get());
			RegistryClient.registerBlockRenderType(RenderType.cutout(), TRAIN_REDSTONE_SENSOR.get());
			RegistryClient.registerBlockRenderType(RenderType.cutout(), TRAIN_SCHEDULE_SENSOR.get());

			RegistryClient.registerBlockColors(STATION_COLOR_ANDESITE.get());
			RegistryClient.registerBlockColors(STATION_COLOR_BEDROCK.get());
			RegistryClient.registerBlockColors(STATION_COLOR_BIRCH_WOOD.get());
			RegistryClient.registerBlockColors(STATION_COLOR_BONE_BLOCK.get());
			RegistryClient.registerBlockColors(STATION_COLOR_CHISELED_QUARTZ_BLOCK.get());
			RegistryClient.registerBlockColors(STATION_COLOR_CHISELED_STONE_BRICKS.get());
			RegistryClient.registerBlockColors(STATION_COLOR_CLAY.get());
			RegistryClient.registerBlockColors(STATION_COLOR_COAL_ORE.get());
			RegistryClient.registerBlockColors(STATION_COLOR_COBBLESTONE.get());
			RegistryClient.registerBlockColors(STATION_COLOR_CONCRETE.get());
			RegistryClient.registerBlockColors(STATION_COLOR_CONCRETE_POWDER.get());
			RegistryClient.registerBlockColors(STATION_COLOR_CRACKED_STONE_BRICKS.get());
			RegistryClient.registerBlockColors(STATION_COLOR_DARK_PRISMARINE.get());
			RegistryClient.registerBlockColors(STATION_COLOR_DIORITE.get());
			RegistryClient.registerBlockColors(STATION_COLOR_GRAVEL.get());
			RegistryClient.registerBlockColors(STATION_COLOR_IRON_BLOCK.get());
			RegistryClient.registerBlockColors(STATION_COLOR_METAL.get());
			RegistryClient.registerBlockColors(STATION_COLOR_MOSAIC_TILE.get());
			RegistryClient.registerBlockColors(STATION_COLOR_PLANKS.get());
			RegistryClient.registerBlockColors(STATION_COLOR_POLISHED_ANDESITE.get());
			RegistryClient.registerBlockColors(STATION_COLOR_POLISHED_DIORITE.get());
			RegistryClient.registerBlockColors(STATION_COLOR_PURPUR_BLOCK.get());
			RegistryClient.registerBlockColors(STATION_COLOR_PURPUR_PILLAR.get());
			RegistryClient.registerBlockColors(STATION_COLOR_QUARTZ_BLOCK.get());
			RegistryClient.registerBlockColors(STATION_COLOR_QUARTZ_BRICKS.get());
			RegistryClient.registerBlockColors(STATION_COLOR_QUARTZ_PILLAR.get());
			RegistryClient.registerBlockColors(STATION_COLOR_SMOOTH_QUARTZ.get());
			RegistryClient.registerBlockColors(STATION_COLOR_SMOOTH_STONE.get());
			RegistryClient.registerBlockColors(STATION_COLOR_SNOW_BLOCK.get());
			RegistryClient.registerBlockColors(STATION_COLOR_STAINED_GLASS.get());
			RegistryClient.registerBlockColors(STATION_COLOR_STONE.get());
			RegistryClient.registerBlockColors(STATION_COLOR_STONE_BRICKS.get());
			RegistryClient.registerBlockColors(STATION_COLOR_WOOL.get());

			RegistryClient.registerBlockColors(STATION_COLOR_ANDESITE_SLAB.get());
			RegistryClient.registerBlockColors(STATION_COLOR_BEDROCK_SLAB.get());
			RegistryClient.registerBlockColors(STATION_COLOR_BIRCH_WOOD_SLAB.get());
			RegistryClient.registerBlockColors(STATION_COLOR_BONE_BLOCK_SLAB.get());
			RegistryClient.registerBlockColors(STATION_COLOR_CHISELED_QUARTZ_BLOCK_SLAB.get());
			RegistryClient.registerBlockColors(STATION_COLOR_CHISELED_STONE_BRICKS_SLAB.get());
			RegistryClient.registerBlockColors(STATION_COLOR_CLAY_SLAB.get());
			RegistryClient.registerBlockColors(STATION_COLOR_COAL_ORE_SLAB.get());
			RegistryClient.registerBlockColors(STATION_COLOR_COBBLESTONE_SLAB.get());
			RegistryClient.registerBlockColors(STATION_COLOR_CONCRETE_SLAB.get());
			RegistryClient.registerBlockColors(STATION_COLOR_CONCRETE_POWDER_SLAB.get());
			RegistryClient.registerBlockColors(STATION_COLOR_CRACKED_STONE_BRICKS_SLAB.get());
			RegistryClient.registerBlockColors(STATION_COLOR_DARK_PRISMARINE_SLAB.get());
			RegistryClient.registerBlockColors(STATION_COLOR_DIORITE_SLAB.get());
			RegistryClient.registerBlockColors(STATION_COLOR_GRAVEL_SLAB.get());
			RegistryClient.registerBlockColors(STATION_COLOR_IRON_BLOCK_SLAB.get());
			RegistryClient.registerBlockColors(STATION_COLOR_METAL_SLAB.get());
			RegistryClient.registerBlockColors(STATION_COLOR_MOSAIC_TILE_SLAB.get());
			RegistryClient.registerBlockColors(STATION_COLOR_PLANKS_SLAB.get());
			RegistryClient.registerBlockColors(STATION_COLOR_POLISHED_ANDESITE_SLAB.get());
			RegistryClient.registerBlockColors(STATION_COLOR_POLISHED_DIORITE_SLAB.get());
			RegistryClient.registerBlockColors(STATION_COLOR_PURPUR_BLOCK_SLAB.get());
			RegistryClient.registerBlockColors(STATION_COLOR_PURPUR_PILLAR_SLAB.get());
			RegistryClient.registerBlockColors(STATION_COLOR_QUARTZ_BLOCK_SLAB.get());
			RegistryClient.registerBlockColors(STATION_COLOR_QUARTZ_BRICKS_SLAB.get());
			RegistryClient.registerBlockColors(STATION_COLOR_QUARTZ_PILLAR_SLAB.get());
			RegistryClient.registerBlockColors(STATION_COLOR_SMOOTH_QUARTZ_SLAB.get());
			RegistryClient.registerBlockColors(STATION_COLOR_SMOOTH_STONE_SLAB.get());
			RegistryClient.registerBlockColors(STATION_COLOR_SNOW_BLOCK_SLAB.get());
			RegistryClient.registerBlockColors(STATION_COLOR_STAINED_GLASS_SLAB.get());
			RegistryClient.registerBlockColors(STATION_COLOR_STONE_SLAB.get());
			RegistryClient.registerBlockColors(STATION_COLOR_STONE_BRICKS_SLAB.get());
			RegistryClient.registerBlockColors(STATION_COLOR_WOOL_SLAB.get());

			RegistryClient.registerBlockColors(STATION_NAME_TALL_BLOCK.get());
			RegistryClient.registerBlockColors(STATION_NAME_TALL_BLOCK_DOUBLE_SIDED.get());
			RegistryClient.registerBlockColors(STATION_NAME_TALL_WALL.get());
			RegistryClient.registerBlockColors(STATION_COLOR_POLE.get());
		}

		RegistryClient.registerBlockRenderType(RenderType.cutout(), LIFT_DOOR_EVEN_1.get());
		RegistryClient.registerBlockRenderType(RenderType.cutout(), LIFT_DOOR_ODD_1.get());
		RegistryClient.registerBlockRenderType(RenderType.cutout(), LIFT_PANEL_EVEN_1.get());
		RegistryClient.registerBlockRenderType(RenderType.cutout(), LIFT_PANEL_ODD_1.get());
		RegistryClient.registerBlockRenderType(RenderType.cutout(), LIFT_PANEL_EVEN_2.get());
		RegistryClient.registerBlockRenderType(RenderType.cutout(), LIFT_PANEL_ODD_2.get());
		RegistryClient.registerBlockRenderType(RenderType.cutout(), ESCALATOR_STEP.get());
		RegistryClient.registerBlockRenderType(RenderType.cutout(), ESCALATOR_SIDE.get());
	}
}
